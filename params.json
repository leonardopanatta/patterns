{"name":"Patterns","tagline":"Simple implementations to ilustrate design patterns and how they can help us to build better code and how anti-patterns can destroy it.","body":"patterns\r\n========\r\n\r\nSimple implementations to ilustrate design patterns and how they can help us to build better code and how anti-patterns can destroy it.\r\n\r\nImplemented so far:\r\n\r\n### Design Patterns\r\n\r\n* GoF Behavioral\r\n  \r\n  [Chain of Responsibility](https://github.com/leonardopanatta/patterns/tree/master/patterns/src/net/panatta/patterns/designpattern/gof/behavioral/chainofresponsibility)\r\n\r\n  Consists of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain. A mechanism also exists for adding new processing objects to the end of this chain.\r\n\r\n### Anti-Patterns\r\n\r\n* OO Related\r\n\r\n  Base Bean\r\n\r\n  Control Coupling\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}